package com.kt.moss;

import static com.kt.moss.CommonUtilities.DISPLAY_MESSAGE_ACTION;
import static com.kt.moss.CommonUtilities.EXTRA_MESSAGE;
import static com.kt.moss.CommonUtilities.SENDER_ID;
import static com.kt.moss.CommonUtilities.SERVER_URL;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Timer;
import java.util.TimerTask;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.widget.TextView;

import com.google.android.gcm.GCMRegistrar;



public class IntroActivity extends Activity{
	
	private final int START_PHONE_GAP = 1;
	static final String TAG = "IntroActivity";
	private 	Timer 		m_timer;
	private 	Context 	m_context;
	TextView mDisplay;
    AsyncTask<Void, Void, Void> mRegisterTask;
    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.intro);
		
        checkNotNull(SERVER_URL, "SERVER_URL");
        checkNotNull(SENDER_ID, "SENDER_ID");
        // Make sure the device has the proper dependencies.
        GCMRegistrar.checkDevice(this);
        // Make sure the manifest was properly set - comment out this line
        // while developing the app, then uncomment it when it's ready.
        GCMRegistrar.checkManifest(this);
        registerReceiver(mHandleMessageReceiver, new IntentFilter(DISPLAY_MESSAGE_ACTION));
        final String regId = GCMRegistrar.getRegistrationId(this);
        
        if (regId.equals("")) {
            // Automatically registers application on startup.
            GCMRegistrar.register(this, SENDER_ID);
        } else {
            // Device is already registered on GCM, check server.
            if (GCMRegistrar.isRegisteredOnServer(this)) {
                // Skips registration.
                Log.i(TAG, getString(R.string.already_registered) + "\n");
            } else {
                // Try to register again, but not in the UI thread.
                // It's also necessary to cancel the thread onDestroy(),
                // hence the use of AsyncTask instead of a raw thread.
                final Context context = this;
                mRegisterTask = new AsyncTask<Void, Void, Void>() {

                    @Override
                    protected Void doInBackground(Void... params) {
                        ServerUtilities.register(context, regId);
                        return null;
                    }

                    @Override
                    protected void onPostExecute(Void result) {
                        mRegisterTask = null;
                    }

                };
                mRegisterTask.execute(null, null, null);
            }
        }
        
        String registration_Id = GCMRegistrar.getRegistrationId(this);
        Log.i("Registration Id", registration_Id);
        
// 		regId 파일 저장
        setRegId(registration_Id);
        
        // Call MainActivity 
		m_context = this;
		m_timer = new Timer();
		m_timer.schedule(m_timeTasker, 2000);
	}

	TimerTask m_timeTasker = new TimerTask() {
		
		@Override
		public void run() {
			m_Handler.sendEmptyMessage(START_PHONE_GAP);
		}
	};
	
	Handler.Callback m_hCallback = new Handler.Callback() {

		@Override
		public boolean handleMessage(Message msg) {
			switch(msg.what) {
			case START_PHONE_GAP :
				m_timer.cancel();
				Intent intent = new Intent(m_context, MainActivity.class);
				startActivity(intent);
				finish();
				break;
			}
			
			return false;
		}
		
	};

	Handler m_Handler = new Handler(m_hCallback);
	
    @Override
    protected void onDestroy() {
        if (mRegisterTask != null) {
            mRegisterTask.cancel(true);
        }
        unregisterReceiver(mHandleMessageReceiver);
//        GCMRegistrar.onDestroy(this);
        super.onDestroy();
    }

    private void checkNotNull(Object reference, String name) {
        if (reference == null) {
            throw new NullPointerException(
                    getString(R.string.error_config, name));
        }
    }

    private final BroadcastReceiver mHandleMessageReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String newMessage = intent.getExtras().getString(EXTRA_MESSAGE);
            Log.i("Intro", newMessage + "\n");
        }
    };

    private void setRegId(String regId) {
    	Log.i(TAG, "================== Registration id file create !! ==================");
    	
		String dirPath = "/storage/sdcard0/";
		
		Log.i(TAG, "moss_regId.txt path : " + dirPath);
		
		File file = new File(dirPath); 
		// 일치하는 폴더가 없으면 생성
		if( !file.exists() ) {
			file.mkdirs();
		}
		// txt 파일 생성
		File savefile = new File(dirPath+"/moss_regId.txt");
		try{
			FileOutputStream fos = new FileOutputStream(savefile);
			fos.write(regId.getBytes());
			fos.close();
			Log.i(TAG, "moss_regId.txt : create!");
			
		} catch(IOException e){
			e.printStackTrace();
		}
		
		File mossRegId = new File(dirPath+"/moss_regId.txt");
		
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd - hh:mm:ss a", Locale.KOREA);
		Date date = new Date(mossRegId.lastModified());
		String fileDate = formatter.format(date);
		
		Log.i(TAG, "moss_regId.txt : lastModified() ====> " +  fileDate);
	}
}
